

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include<string.h>
#include<stdbool.h>

void FRONT_REAR(int *front, int *rear)
{
    printf("\n FRONT: %d REAR: %d \n", *front, *rear);
}

void PRINT(int q[10])
{
    int size = 10;
    int i;
    for(i=0;i<size;i++)
    {
        printf(" %d", q[i]);
    }
}

void DEQUEQUE(int q[10], int *front, int *rear)
{
    int size = 10;
    if(*front == -1 && *rear == -1)
    {
        printf("\n The List is Empty\n");
        return;
    }
    if(*front == *rear)
    {
        if(q[*front] == 0)
        {
            printf("\n The List is Empty\n");
            return;
        }
        else {
            q[*front] = 0;
            return;
        }
        
    }
    q[*front] = 0;
    *front = *front +1;
    if(*front == size)
    {
        *front = 0;
    }
}
void ENQUEUE(int value, int q[10], int *front, int *rear)
{
    int size = 10;
    if(*front==-1 && *rear==-1)
    {
        *front = 0;
        *rear = 0;
        q[*rear] = value;
        return;
    }
    *rear = *rear +1;
    if(*rear==size)
    {
        *rear = 0;
    }
    if(*rear == *front)
    {
        printf("\nStack is full\n");
        *rear = *rear -1;
        return;
    }
    q[*rear] = value;
}

int main(void)
{
  int front = -1;
  int rear =-1 ;
  int q[10];
  int i;
  for(i=0;i<10;i++)
  {
      q[i] = 0;
  }
  
  ENQUEUE(2, q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  ENQUEUE(5, q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  ENQUEUE(7, q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  DEQUEQUE(q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  ENQUEUE(3, q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  ENQUEUE(1, q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  ENQUEUE(9, q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  ENQUEUE(10, q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  
  ENQUEUE(4, q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  
  ENQUEUE(6, q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  DEQUEQUE(q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  ENQUEUE(2, q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  
  ENQUEUE(69, q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  ENQUEUE(29, q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  
  ENQUEUE(66, q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  
  printf("\n");
  DEQUEQUE(q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  
  printf("\n");
  DEQUEQUE(q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  
  printf("\n");
  DEQUEQUE(q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  
  
  DEQUEQUE(q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  
  printf("\n");
  
  DEQUEQUE(q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  
  printf("\n");
   DEQUEQUE(q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  
  DEQUEQUE(q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  
  DEQUEQUE(q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  
  
  DEQUEQUE(q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);   
  
  printf("\n");
  
  DEQUEQUE(q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");
  
  
  DEQUEQUE(q, &front, &rear);
  PRINT(q);
  FRONT_REAR(&front, &rear);
  printf("\n");

 

    return 0;
}